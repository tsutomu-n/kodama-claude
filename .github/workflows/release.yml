name: Release

permissions:
  contents: write  # For creating releases
  packages: read   # For reading packages

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v0.1.0)"
        required: true

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.20'
      
      - name: Install dependencies
        run: bun install
      
      - name: Run tests
        run: bun test
        continue-on-error: true  # Allow workflow to continue but mark as warning
      
      - name: Build binaries
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Build for Linux x64 (baseline for maximum compatibility)
          bun build ./bin/kc.ts \
            --compile \
            --target=bun-linux-x64-baseline \
            --outfile dist/kc-linux-x64
          
          # Build for Linux ARM64
          bun build ./bin/kc.ts \
            --compile \
            --target=bun-linux-arm64 \
            --outfile dist/kc-linux-arm64
          
          # Make binaries executable
          chmod +x dist/kc-linux-*
          
          # Generate checksums (both formats for compatibility)
          cd dist
          sha256sum kc-linux-* > checksums.txt
          cp checksums.txt checksums.sha256
          cd ..
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: binaries
          path: dist/
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Kodama for Claude Code ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          body: |
            ## Installation
            
            ### One-liner (Ubuntu/WSL)
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/install.sh | bash
            ```
            
            ### Manual Installation
            
            1. Download the binary for your architecture
            2. Make it executable: `chmod +x kc-linux-*`
            3. Move to PATH: `sudo mv kc-linux-* /usr/local/bin/kc`
            
            ## Checksums
            
            SHA256 checksums are available in `checksums.txt` for verification.
            
            ## Uninstallation
            
            To safely uninstall Kodama for Claude Code:
            ```bash
            # Keep your data (default)
            kc uninstall
            
            # Or remove everything
            kc uninstall --remove-all
            ```
          files: |
            dist/kc-linux-x64
            dist/kc-linux-arm64
            dist/checksums.txt
            dist/checksums.sha256
            install.sh
            uninstall.sh

  docker:
    name: Build Docker Image (Optional)
    needs: build
    runs-on: ubuntu-latest
    if: false  # Disabled for now, enable if needed
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: binaries
          path: dist/
      
      - name: Build Docker image
        run: |
          cat > Dockerfile <<EOF
          FROM ubuntu:22.04
          
          RUN apt-get update && \
              apt-get install -y git curl && \
              rm -rf /var/lib/apt/lists/*
          
          COPY dist/kc-linux-x64 /usr/local/bin/kc
          RUN chmod +x /usr/local/bin/kc
          
          WORKDIR /workspace
          
          ENTRYPOINT ["kc"]
          EOF
          
          docker build -t kodama-claude:latest .